from django.db import models


class SimaItem(models.Model):
    item_id = models.PositiveIntegerField(unique=True, primary_key=True)
    sid = models.PositiveIntegerField(null=True, )
    uid = models.UUIDField(null=True, )
    name = models.CharField(null=True, max_length=255)
    slug = models.SlugField(null=True, max_length=255)
    is_disabled = models.BooleanField(null=True, default=False)
    reason_of_disabling = models.CharField(null=True, max_length=255, blank=True)
    minimum_order_quantity = models.DecimalField(null=True, max_digits=10, decimal_places=2)
    price = models.DecimalField(null=True, max_digits=20, decimal_places=10)
    price_max = models.DecimalField(null=True, max_digits=20, decimal_places=10)
    price_per_square_meter = models.DecimalField(null=True, max_digits=20, decimal_places=10)
    price_per_linear_meter = models.DecimalField(null=True, max_digits=20, decimal_places=10)
    currency = models.CharField(null=True, max_length=3)
    created_at = models.DateTimeField(null=True, )
    updated_at = models.DateTimeField(null=True, )

    boxtype_id = models.PositiveIntegerField(null=True, )
    box_depth = models.DecimalField(null=True, max_digits=20, decimal_places=10)
    box_height = models.DecimalField(null=True, max_digits=20, decimal_places=10)
    box_width = models.DecimalField(null=True, max_digits=20, decimal_places=10)

    in_box = models.PositiveIntegerField(null=True, )
    in_set = models.PositiveIntegerField(null=True, )
    depth = models.DecimalField(null=True, max_digits=20, decimal_places=10)

    unit_id = models.PositiveIntegerField(null=True, )
    nested_unit_id = models.PositiveIntegerField(null=True, blank=True)
    width = models.DecimalField(null=True, max_digits=20, decimal_places=10)
    height = models.DecimalField(null=True, max_digits=20, decimal_places=10)

    trademark_id = models.PositiveIntegerField(null=True, blank=True)
    country_id = models.PositiveIntegerField(null=True, )
    cart_min_diff = models.DecimalField(null=True, max_digits=10, decimal_places=2)
    keep_package = models.BooleanField(null=True, default=False)
    per_package = models.PositiveIntegerField(null=True, )

    video_file_name = models.CharField(null=True, max_length=255, blank=True)
    video_cover_file_name = models.CharField(null=True, max_length=255, blank=True)
    video_file_url = models.BooleanField(null=True, default=False)
    series_id = models.PositiveIntegerField(null=True, blank=True)

    is_hit = models.BooleanField(null=True, default=False)
    is_licensed = models.CharField(max_length=255, null=True, default='')
    is_price_fixed = models.BooleanField(null=True, default=False)
    is_exclusive = models.BooleanField(null=True, default=False)
    is_motley = models.BooleanField(null=True, default=False)
    is_adult = models.BooleanField(null=True, default=False)
    is_protected = models.BooleanField(null=True, default=False)

    offer_id = models.PositiveIntegerField(null=True, blank=True)
    certificate_type_id = models.PositiveIntegerField(null=True, )
    has_usb = models.BooleanField(null=True, default=False)
    has_battery = models.BooleanField(null=True, default=False)
    has_clockwork = models.BooleanField(null=True, default=False)
    has_sound = models.BooleanField(null=True, default=False)
    has_radiocontrol = models.BooleanField(null=True, default=False)
    is_inertial = models.BooleanField(null=True, default=False)
    is_on_ac_power = models.CharField(max_length=255, null=True, default='')
    has_rus_voice = models.BooleanField(null=True, default=False)
    has_rus_pack = models.BooleanField(null=True, default=False)
    has_light = models.BooleanField(null=True, default=False)
    is_day_offer = models.BooleanField(null=True, default=False)

    page_title = models.CharField(null=True, max_length=255, blank=True)
    page_keywords = models.CharField(null=True, max_length=255, blank=True)
    page_description = models.CharField(null=True, max_length=255, blank=True)
    parent_item_id = models.PositiveIntegerField(null=True, )
    max_qty = models.PositiveIntegerField(null=True, )
    min_qty = models.PositiveIntegerField(null=True, )
    modifier_id = models.PositiveIntegerField(null=True, blank=True)
    modifier_value = models.CharField(null=True, max_length=255, blank=True)
    qty_multiplier = models.PositiveIntegerField(null=True, )
    gift_id = models.PositiveIntegerField(null=True, blank=True)

    surface_area = models.DecimalField(null=True, max_digits=20, decimal_places=10, blank=True)
    linear_meters = models.DecimalField(null=True, max_digits=20, decimal_places=10, blank=True)
    is_loco = models.BooleanField(null=True, default=False)
    novelted_at = models.DateTimeField(null=True, blank=True)
    is_paid_delivery = models.BooleanField(null=True, default=False)
    package_volume = models.DecimalField(null=True, max_digits=10, decimal_places=3)
    min_age = models.PositiveIntegerField(null=True, blank=True)
    power = models.CharField(null=True, max_length=255, blank=True)
    volume = models.CharField(null=True, max_length=255, blank=True)
    transport_condition_id = models.PositiveIntegerField(null=True, blank=True)
    has_discount = models.BooleanField(null=True, default=True)
    is_gift = models.BooleanField(null=True, default=False)
    is_boxed = models.BooleanField(null=True, default=False)

    product_volume = models.DecimalField(null=True, max_digits=20, decimal_places=15)
    box_volume = models.DecimalField(null=True, max_digits=30, decimal_places=15)
    box_capacity = models.PositiveIntegerField(null=True, )
    packing_volume_factor = models.DecimalField(null=True, max_digits=20, decimal_places=10)
    is_tire_spike = models.BooleanField(null=True, default=False)
    is_tire_run_flat = models.BooleanField(null=True, default=False)
    tire_season_id = models.PositiveIntegerField(null=True, )
    tire_diameter_id = models.PositiveIntegerField(null=True, )
    tire_width_id = models.PositiveIntegerField(null=True, )
    tire_section_height_id = models.PositiveIntegerField(null=True, )
    tire_load_index_id = models.PositiveIntegerField(null=True, )
    tire_speed_index_id = models.PositiveIntegerField(null=True, )
    wheel_lz_id = models.PositiveIntegerField(null=True, )
    wheel_width_id = models.PositiveIntegerField(null=True, )
    wheel_diameter_id = models.PositiveIntegerField(null=True, )
    wheel_dia_id = models.PositiveIntegerField(null=True, )
    wheel_pcd_id = models.PositiveIntegerField(null=True, )
    wheel_et_id = models.PositiveIntegerField(null=True, )
    has_body_drawing = models.BooleanField(null=True, default=False)
    has_cord_case = models.BooleanField(null=True, default=False)
    has_teapot = models.BooleanField(null=True, default=False)
    has_termostat = models.BooleanField(null=True, default=False)
    is_imprintable = models.BooleanField(null=True, default=False)
    isbn = models.CharField(null=True, max_length=255)
    page_count = models.PositiveIntegerField(null=True, blank=True)
    is_add_to_cart_multiple = models.BooleanField(null=True, default=True)
    supply_period = models.PositiveIntegerField(null=True, )
    has_action = models.BooleanField(null=True, default=False)
    has_action_discount_system = models.BooleanField(null=True, default=False)
    has_jewelry_action = models.BooleanField(null=True, default=False)
    has_3_pay_2_action = models.BooleanField(null=True, default=False)
    has_best_fabric = models.BooleanField(null=True, default=False)
    has_best_textile = models.BooleanField(null=True, default=False)
    has_number_one_made_in_russia = models.BooleanField(null=True, default=False)

    photo_url = models.URLField(null=True, blank=True)
    audio_filename = models.CharField(null=True, max_length=255, blank=True)
    photo_3d_count = models.IntegerField(null=True, blank=True)
    is_markdown = models.BooleanField(null=True, default=False)
    is_prepay_needed = models.BooleanField(null=True, default=False)
    is_paid_delivery_ekb = models.BooleanField(null=True, default=False)
    mean_rating = models.DecimalField(null=True, max_digits=5, decimal_places=2, blank=True)
    comments_count = models.IntegerField(null=True, default=0)
    markdown_reason = models.CharField(null=True, max_length=255, blank=True)
    is_wholesale = models.BooleanField(null=True, default=False)
    is_wholesale_conservation = models.BooleanField(null=True, default=False)
    type = models.IntegerField(null=True, default=0)
    is_shock_price = models.BooleanField(null=True, default=False)
    is_recommended = models.BooleanField(null=True, default=False)
    vat = models.DecimalField(null=True, max_digits=5, decimal_places=2)
    is_export_to_s3 = models.BooleanField(null=True, default=False)
    currency_sign = models.CharField(null=True, max_length=50)
    is_enough = models.BooleanField(null=True, default=True)
    qty_rule = models.CharField(null=True, max_length=50)
    qty_rules = models.CharField(null=True, max_length=255)
    custom_qty_rules_data = models.JSONField(null=True, blank=True)
    plural_name_format = models.CharField(null=True, max_length=50)
    in_box_plural_name_format = models.CharField(null=True, max_length=50)
    balance_plural_name_format = models.CharField(null=True, max_length=50, blank=True)
    can_buy_by_credit = models.BooleanField(null=True, default=False)
    supplier_code = models.CharField(null=True, max_length=50)
    weight = models.DecimalField(null=True, max_digits=10, decimal_places=2, default=0)
    has_special_offer = models.BooleanField(null=True, default=False)
    has_day_discount = models.BooleanField(null=True, default=False)
    has_erich_krause = models.BooleanField(null=True, default=False)
    has_tm_gamma_gifts = models.BooleanField(null=True, default=False)
    has_superprice_on_line = models.BooleanField(null=True, default=False)
    has_week_discount = models.BooleanField(null=True, default=False)
    has_3days_discount = models.BooleanField(null=True, default=False)
    has_best_fabric_2018 = models.BooleanField(null=True, default=False)
    has_pay_later = models.BooleanField(null=True, default=False)
    has_new_rules = models.BooleanField(null=True, default=False)
    has_item_month = models.BooleanField(null=True, default=False)
    has_batteries_gift = models.BooleanField(null=True, default=False)
    special_offer_id = models.IntegerField(null=True, blank=True)
    has_4_pay_2_action = models.BooleanField(null=True, default=False)
    has_take_installments_action = models.BooleanField(null=True, default=False)
    min_sum_order = models.DecimalField(null=True, max_digits=10, decimal_places=2, blank=True)
    wholesale_price = models.DecimalField(null=True, max_digits=10, decimal_places=2, blank=True)
    wholesale_price_text = models.CharField(null=True, max_length=100, blank=True)
    is_part = models.BooleanField(null=True, default=False)
    is_remote_store = models.BooleanField(null=True, default=False)
    is_small_wholesale_available = models.BooleanField(null=True, default=True)
    is_plant = models.BooleanField(null=True, default=False)
    color = models.CharField(null=True, max_length=50, blank=True)
    image_title = models.CharField(null=True, max_length=255, blank=True)
    image_alt = models.CharField(null=True, max_length=255, blank=True)
    short_name = models.CharField(null=True, max_length=100, blank=True)
    is_free_delivery = models.BooleanField(null=True, default=True)
    min_sum_for_free_delivery = models.DecimalField(null=True, max_digits=10, decimal_places=2, blank=True)
    updated_item_at = models.DateTimeField(null=True, blank=True)
    img = models.URLField(null=True, blank=True)
    nested_unit = models.CharField(null=True, max_length=50, blank=True)
    is_entrance_type_by_weight = models.BooleanField(null=True, default=True)
    real_min_qty = models.PositiveIntegerField(null=True, default=100)
    is_weighted_goods = models.BooleanField(null=True, default=False)

    offer = models.CharField(null=True, max_length=100, blank=True)
    discount_percent = models.DecimalField(null=True, max_digits=5, decimal_places=2, blank=True)
    has_gift = models.BooleanField(null=True, default=False)
    has_gift_assignee = models.BooleanField(null=True, default=False)
    is_novelty = models.BooleanField(null=True, default=False)
    item_url = models.CharField(null=True, max_length=255, blank=True)
    price_unit = models.CharField(null=True, max_length=50, blank=True)
    has_volume_discount = models.BooleanField(null=True, default=False)
    modifiers_count = models.IntegerField(null=True, blank=True)
    size = models.CharField(null=True, max_length=50)
    stuff = models.CharField(null=True, max_length=100)
    trademark = models.CharField(null=True, max_length=100, blank=True)
    series = models.CharField(null=True, max_length=100, blank=True)
    ecommerce_variant = models.CharField(null=True, max_length=50)
    loan_category_id = models.IntegerField(null=True, blank=True)
    transit_in_settlement = models.CharField(null=True, max_length=50, blank=True)
    is_item_description_hidden = models.BooleanField(null=True, default=False)
    is_found_cheaper_enabled = models.BooleanField(null=True, default=False)
    wholesale_price_unit = models.CharField(null=True, max_length=50, blank=True)
    wholesale_text = models.CharField(null=True, max_length=100)
    arrival_date = models.DateTimeField(null=True, blank=True)
    is_available_in_giper = models.BooleanField(null=True, default=False)
    retail_price = models.DecimalField(null=True, max_digits=10, decimal_places=2)
    video_cover_url = models.URLField(null=True, blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Товар Сима Лэнд'
        verbose_name_plural = 'Товары Сима Лэнд'


class Country(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(null=True, max_length=100)
    full_name = models.CharField(null=True, max_length=255)
    alpha2 = models.CharField(null=True, max_length=2)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Страна производитель'
        verbose_name_plural = 'Страны производители'


class SimaCategory(models.Model):
    cat_id = models.PositiveIntegerField(unique=True, primary_key=True)
    sid = models.PositiveIntegerField(null=True, )
    name = models.CharField(null=True, max_length=255)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Категория Сима Лэнд'
        verbose_name_plural = 'Категории Сима Лэнд'
